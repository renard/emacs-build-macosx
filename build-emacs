#!/bin/sh


set -e

ROOT_DIR="`pwd`"
BUILD_DIR=build
SRC_DIR=emacs


rm -rf ${BUILD_DIR}
mkdir ${BUILD_DIR}

cd ${SRC_DIR}

if test -n "$1"; then
    commit="$1"
else
    commit="origin/master"
    git pull
fi

git archive --format tar $commit | tar -C ../${BUILD_DIR} -xvf -

REV=`git log -n 1 --no-color --pretty='format:%h' ${commit}`
TIMESTAMP=`git log -n 1 --no-color --pretty='format:%at' ${commit}`
PATCH_LIST=`find ../patches/ -name '*.patch'`
cd ../${BUILD_DIR}

rsync -aE ../site-lisp lisp

sed -e "s/@@GIT_COMMIT@@/$REV/" -i '' lisp/site-lisp/early-site-start.el

for f in ${PATCH_LIST}; do
    echo "Applying patch `basename $f`"
    patch -p1 -i $f
done

STRINGS="
  nextstep/templates/Emacs.desktop.in
  nextstep/templates/Info-gnustep.plist.in
  nextstep/templates/Info.plist.in
  nextstep/templates/InfoPlist.strings.in"

DAY=`date -u -r $TIMESTAMP +"%Y-%m-%d_%H-%M-%S"`
ORIG=`grep ^AC_INIT configure.ac`
VNUM=`echo $ORIG | sed 's#^AC_INIT(\(.*\))#\1#; s/ //g' | cut -f2 -d,`
VERS="$DAY Git $REV"
DESCR="Emacs_Cocoa_${VNUM}_${DAY}_Git_${REV}"

#autogen/copy_autogen
./autogen.sh

# Use Homebrew libxml pkgconfig
export PKG_CONFIG_PATH=../pkgconfig

CFLAGS="${CFLAGS} -pipe -march=nocona"
export CC=gcc
export CFLAGS

for f in $STRINGS; do
    sed -e "s/@version@/@version@ $VERS/" -i '' $f
done


./configure \
    --build=x86_64-apple-darwin \
    --without-dbus \
    --with-imagemagick \
    --with-ns

NCPU=$(getconf _NPROCESSORS_ONLN)
make bootstrap -j$NCPU || exit 1 && make install -j$NCPU


rm -rf _out
mkdir _out

rsync -aE nextstep/Emacs.app _out
rsync -aE ../emacs-dmg/* _out
rsync -aE ../emacs/src  _out/Emacs.app/Contents/Resources/
mkdir dir _out/Emacs.app/Contents/Resources/patches
cp ${PATCH_LIST} _out/Emacs.app/Contents/Resources/patches

# http://stackoverflow.com/questions/7470637/dynamic-library-in-application-bundle-mac-os-x
# http://stackoverflow.com/questions/4677044/how-to-use-dylib-in-mac-os-x-c
# Copy dylibs into the Emacs.app package

fix_dynlib() {
    local f=$1
    local indent="$2"
    local target
    local lib
    echo "$indent* Examinating $f"
    for lib in $(otool -L $f  | grep -F '.dylib ' | grep -v '/usr/lib/' |\
                 grep -v '[[:space:]]\+@executable_path/' |\
                 sed -n 's/^[[:space:]]*\(.*\) (.*/\1/p' | uniq); do
        target="_out/Emacs.app/Contents/Resources/lib/$(basename $lib)"
        if ! test -e "$target"; then
            echo "$indent  - copying $(basename $lib)"
            cp "$lib" "$target"
            chmod 644 "$target"
            install_name_tool -id \
                              @executable_path/../Resources/lib/$(basename $lib) \
                              "$target"
            fix_dynlib "$target" "  $indent"
        fi
        echo "$indent  - fixing $(basename $lib)"
        install_name_tool -change $lib \
                          @executable_path/../Resources/lib/$(basename $lib) $f
    done
}

mkdir -p _out/Emacs.app/Contents/Resources/lib
for f in `find  _out/Emacs.app/Contents/MacOS/ -type f`; do
    fix_dynlib $f
done


#http://stackoverflow.com/questions/96882/how-do-i-create-a-nice-looking-dmg-for-mac-os-x-using-command-line-tools
# http://asmaloney.com/2013/07/howto/packaging-a-mac-os-x-application-using-a-dmg/

Rez -o "_out/More.../Alternative Icon" _out/icon.r
rm _out/icon.r

# Set the finder info bit that says the file has a custom icon.
xattr -x -w com.apple.FinderInfo "00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" "_out/More.../Alternative Icon"

mv _out/dot-DS_Store _out/.DS_Store
SetFile -a Vc _out/background.*

rm -f ../tmp.dmg
hdiutil makehybrid -hfs -hfs-volume-name "$DESCR" -hfs-openfolder _out _out -o ../tmp.dmg
hdiutil convert -format UDZO ../tmp.dmg -o "../${DESCR}.dmg"

rm -rf ${BUILD_DIR}
rm -rf tmp.dmg
